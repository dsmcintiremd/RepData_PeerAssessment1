mat<-matrix(1:4,2,2)
mat.data
mat
library(data.table)
tables()
DT = data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
library(data.table)
library(data.table)
install.packages("data.table")
library(data.table)
library(xlsx)
R.Version()
Sys.info()
library(rJava)
Sys.getenv("JAVA_HOME")
install.packages("rJava")
Sys.getenv("JAVA_HOME")
library(xlsx)
library(rJava)
Sys.getenv("JAVA_HOME")
library(rJava)
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre6/")
library(rJava)
library(xlsx)
system("java -version")
library(httr)
?oauth_app
library(httpuv)
install.packages("httpuv")
library(httpuv)
clientID     <- "ea5d5c0a0bdcfb422ed7"
ClientSecret <- "a57be94c43a8d74a07272cb9ef516b0448f25a95"
myapp = oauth_app("dmcintire", key=clientID , secret= clientSecret)
clientID     <- "ea5d5c0a0bdcfb422ed7"
clientsecret <- "a57be94c43a8d74a07272cb9ef516b0448f25a95"
myapp = oauth_app("dmcintire", key=clientID , secret= clientsecret)
github_token <- oauth2.0_token(oauth_endpoints("dmcintire"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config (token = github_token)
str(gtoken)
gtoken
homeTL = GET("https://api.github.com/users/jtleek/repos", gtoken)
homeTL
json1 = content(homeTL)
json1
json2 = jsonlite::fromJSON(toJSON(json1))
str(json1)
head(str(json1))
rawcontent = content(homeTL)
jsoned<-fromJSON(rawcontent)
rawcontent[[1]]
install.packages("RJSONIO")
jsoned<-fromJSON(rawcontent)
library(json)
library(RJSONIO)
jsoned<-fromJSON(rawcontent)
json2 = jsonlite::fromJSON(toJSON(json1))
json2 = jsonlite::fromJSON(toJSON(rawcontent))
json2
str(json2)
jsoned<-fromJSON(rawcontent)
names(json2)
json2$name
View(json2)
View(json2)
json2$created_at
json2$name=='datasharing'
json2 [6,]
json2 [ json2$name=='datasharing',]
json2 [ json2$name=='datasharing', json2$created_at]
json2 [ json2$name=='datasharing',]
json2$created_at [ json2$name=='datasharing',]
json2$created_at [ json2$name=='datasharing', "create_at"]
json2$created_at [ json2$name=='datasharing', "created_at"]
json2 [ json2$name=='datasharing', "created_at"]
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?select
select (cran, ip_id, package, country)
5:20
select (cran, r_arch:country)
select (cran, country:r_arch)
cran
select (cran,-time)
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_versio=="3.1.1", country=="US")
filter(cran,r_version=="3.1.1", country=="US")
?Comparison
filter(cran,r_version=="3.1.1", country "IN" (INDIA)
filter(cran,r_version=="3.1.1", country "IN" (INDIA))
filter(cran,r_version=="3.1.1", country IN ("INDIA"))
filter(cran,r_version=="3.1.1", country IN "INDIA")
filter(cran,r_version=="3.1.1", country %in% "INDIA")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter (cran, size > 100500 & r_os=="linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, (desc(ip_id)
)
))
arrange(cran2, (desc(ip_id))
)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange (cran2, country, desc(r_version), ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package,size,mean)
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts <- filter(pack_sum$count>679)
top_counts <- filter(pack_sum, count>679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(counts) )
top_counts_sorted <- arrange(top_counts,desc(count) )
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(count))
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select() %>%
print
cran %>% select(cran,ip_id,country,package,size) %>%
)
select(cran,ip_id,country,package,size)
print
cran
cran %>% select(ip_id,country,package,size)
source()
help
print
cran %>% select(ip_id,country,package,size) %>% print
continue
cran %>%
select(ip_id,country,package,size) %>%
print
submit()
submit()
submit()
submit()
url = url ("http://bassins.com/wine/italy/toscano.php")
htmlcode = readLines(url)
tail(htmlcode)
str(html)
str(htmlcode)
htmlcode[4]
htmlcode[44]
htmlcode[144]
htmlcode[244]
library(httr)
library(httpuv)
library(RJSONIO)
homeTL = GET("http://bassins.com/wine/italy/toscano.php")
homeTL
str(homeTL)
rawcontent = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(rawcontent))
library(rjson)
install.packages("rjson")
library(rjson)
url = url ("http://bassins.com/wine/italy/toscano.php")
url <- "http://bassins.com/wine/italy/toscano.php"
raw_json <- scan(url, "", sep="\n")
mygeo <- fromJSON(raw_json)
str(raw_json)
raw_json[403]
raw_json[402]
raw_json[401]
url <- "http://open.mapquestapi.com/geocoding/v1/address?location=1600%20Pennsylvania%20Ave,%20Washington,%20DC&outFormat=xml"
mygeo <- xmlToDataFrame(url)
mygeo$result
mygeo <- xmlToDataFrame(url)
library(XML)
mygeo <- xmlToDataFrame(url)
population = readHTMLTable(url, which=3)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tiyr)
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2,sex_class,count,-grade)
res
?separate()
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
reset()
submit()
submit()
?spread
submit()
submit
submit()
submit()
reset()
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
submit()
student4
students4
submit()
submit()
submit()
submit()
passed
failed
mutate(gradebook,status,"passed")
exit
quit
resume
gradebook
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed,failed)
sat
submit
submit()
submit()
submit()
submit()
library(datasets)
hist(airquality$Ozone)
hist(airquality$Ozone, main="Global Power")
hist(airquality$Ozone, main="Global Active Power",  xlab="Global Active Power (Kilowatts")
col(blue)
col("blue")
par("col")
par(col="blue")
hist(airquality$Ozone, main="Global Active Power",  xlab="Global Active Power (Kilowatts")
par("col")
hist(airquality$Ozone, main="Global Active Power",  xlab="Global Active Power (Kilowatts")
hist(airquality$Ozone, main="Global Active Power",  xlab="Global Active Power (Kilowatts)", col="green")
hist(airquality$Ozone, main="Global Active Power",  xlab="Global Active Power (Kilowatts)", col="orange")
hist(airquality$Ozone, main="Global Active Power",  xlab="Global Active Power (Kilowatts)", col="red")
hist(airquality$Ozone, main="Global Active Power",  xlab="Global Active Power (Kilowatts)", col="red")
with(airquality, plot(Wind, Ozone))
with(airquality, plot(Wind, Ozone), ylab="Global Active Power (kilowatts")
plot(airquality$Wine, airquality$Ozone)
plot(airquality$Wind, airquality$Ozone)
plot(airquality$Wind, airquality$Ozone, ylab="Global Active Power (kilowatts")
plot(airquality$Wind, airquality$Ozone, ylab="Global Active Power (kilowatts)", type="l")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City",
type = "n"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", Sub_metering_3))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", pch = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(airquality, plot(Wind, Ozone, main = """, ylab="Energy sub metering", type = "n"))
with(airquality, plot(Wind, Ozone, ylab="Energy sub metering", type = "n"))
legend("topright", pch = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(airquality, plot(Wind, Ozone, ylab="Energy sub metering", type = c("l","n"))
par(mfrow = c(2, 2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
plot(Temp, Ozone, main = "Ozone and Temperature")
})
with(airquality, {
plot(Wind, Ozone, main = "1,1")
plot(Solar.R, Ozone, main = "1,2")
plot(Temp, Ozone, main = "2,1")
plot(Temp, Ozone, main = "2,2")
})
with(airquality, {
plot(Wind, Ozone, main = "1,1")
plot(Solar.R, Ozone, main = "1,2")
plot(Temp, Solar.R, main = "2,1")
plot(Temp, Ozone, main = "2,2")
})
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
PM25_BLT_LA_VEH <- data.frame (year=c("1999","2002","2005","2008","1999","2002","2005","2008"), fips = c("06037","06037","06037","06037","24510","24510","24510","24510"), totalpmi25 = c(243,342,252,234,53,34,53,35),
changepct = c(0.0, 0.12, 0.14, 0.15, 0.0, 0.14, 0.23, 0.23),
city=c("Los Angeles County, CA","Los Angeles County, CA","Los Angeles County, CA","Los Angeles County, CA","Baltimore City, MD","Baltimore City, MD","Baltimore City, MD","Baltimore City, MD")
)
View(PM25_BLT_LA_VEH)
num.rows(PM25_BLT_LA_VEH)
num.row(PM25_BLT_LA_VEH)
nrow(PM25_BLT_LA_VEH)
for (i in 1:nrow(PM25_BLT_LA_VEH)
for (j in 1:2)
?switch
library(plyr)
library(dplyr)
library(ggplot2)
library(plyr)
library(dplyr)
library(ggplot2)
NEI <- readRDS("summarySCC_PM25.rds")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl
swirl()
swirl()
sample(colors(),10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette (c"red","blue")
p1 <- colorRampPalette (c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(10))
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("red","blue","green"),0.5)
p3 <- colorRampPalette(c("red","blue","green"),aplpha=0.5)
p3 <- colorRampPalette(c("red","blue","green"),alpha=0.5)
p3 <- colorRampPalette(c("red","blue","green"),alpha=.5)
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch=19,rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols<-brewer.pal(3,"BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(20))
image(volcano,col(pal(20)))
image(volcano,col=(pal(20)))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
library(swirl)
swirl()
swirl()
View(flags)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags [ ,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(unique_vals,unique)
sapply(unique,unique)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
?which
swirl()
library(swirl)
swirl()
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population,flags$landmass,summary)
exit
setwd("~/Dave/Coursera/DataScientistsToolKit")
setwd("~/Dave/Coursera/DataScientistsToolKit/RepData_PeerAssessment1")
activity_data <- read.csv (unz("activity.zip","activity.csv"))
View(activity_data)
str(activity_data)
activity_data$date <- as.Date(activity_data$date, "%Y/%m/%d"))
activity_data$date <- as.Date(activity_data$date, "%Y/%m/%d")
str(activity_data)
activity_data$date <- as.Date(activity_data$date, "%Y-%m-%d")
str(activity_data)
activity_data <- read.csv (unz("activity.zip","activity.csv"))
str(activity_data)
as.Character(activity_data$date)
as.character(activity_data$date)
activity_data$date <- as.Date(as.character(activity_data$date), "%Y-%m-%d")
str(activity_data)
library(ddply)
library(ddplry)
library(plry)
library(dplry)
library(plyr)
mean_steps <- ddply (activity_data, .(date), summarize, totalsteps=sum(steps), mediansteps=median(steps),meansteps=mean(steps))
View(mean_steps)
steps_summary <- ddply (activity_data, .(date), summarize, totalsteps=sum(steps), mediansteps=median(steps),meansteps=mean(steps))
qplot (day, totalsteps, data=steps_summary, geom="histogram", stat="identity", main="tital", ylab="TOTAL Steps")
library(qqplot2)
library(ggplot2)
qplot (day, totalsteps, data=steps_summary, geom="histogram", stat="identity", main="tital", ylab="TOTAL Steps")
View(steps_summary)
qplot (date, totalsteps, data=steps_summary, geom="histogram", stat="identity", main="tital", ylab="TOTAL Steps")
library(xtable)
install.packages(xtable)
install.packages("xtable")
library(xtable)
summary(steps_summary)
str(summary(steps_summary))
mean(steps_summary$totalsteps)
median(steps_summary$totalsteps)
is.na(activity_data$steps)
mean(steps_summary$totalsteps, na.rm=TRUE)
median(steps_summary$totalsteps, na.rm=TRUE)
daily_activity <- ddply ( activity_data, .(interval), summarize, meansteps = mean(steps) )
View(daily_activity)
unique(activity_data$interval)
View(daily_activity)
daily_activity <- ddply ( activity_data, .(interval), summarize, meansteps = mean(steps), na.rm=TRUE)
View(daily_activity)
daily_activity <- ddply ( activity_data, .(interval), summarize, meansteps = mean(steps,na.rm=TRUE))
View(daily_activity)
View(steps_summary)
plot(daily_activity$interval,daily_activity$meansteps, xlab="Five Minutes Interval", ylab="Average Steps")
plot(daily_activity$interval,daily_activity$meansteps, xlab="Five Minutes Interval", ylab="Average Steps",type="1")
plot(daily_activity$interval,daily_activity$meansteps, xlab="Five Minutes Interval", ylab="Average Steps",type="l")
max(daily_activity$meansteps)
str(daily_activity)
which.max(daily_activity)
which.max(daily_activity$meansteps)
daily_activity[104,]
daily_activity[which.max(daily_activity$meansteps),]
